\documentclass{article}
\usepackage{multirow}
\setlength\parindent{0pt}
\usepackage{geometry}
\usepackage{longtable}
\usepackage{float}
\geometry{left=1.5cm,right=1.5cm,top=1.5cm,bottom=1.5cm}

\title{reportRx Clinical Report Demo}
\author{Ryan Del Bel}
\begin{document}
\maketitle


<<message=FALSE,include=FALSE,echo=FALSE>>=
#update/install package
#devtools::install_github('reportRx','rdelbel')
require(reportRx) # Load package
require(survival) # Need to access dataframe lung
require(xtable) #Dont strictly need this but would need if we want to print dataframes outside of the reportRx functions 
require(reshape) # shouldnt need this but we do.. I will look into it later.
lung$sex2<-factor(ifelse(lung$sex==1,"Male","Female")) #Make sex2 a factor version of sex
lung$sex<-lung$sex-1 #Make sex 0,1 because later we will use it in logistic regression
lung$OS<-lung$status-1 #Make status 0,1 insead of 1,2
lung$OS2<-lung$OS
lung$OS2[1:20]<-2 #Lung status2 is not a competing risk problem with status 0,1,2
lung$ph.ecog<-factor(lung$ph.ecog) #make ecog a factor
lung$catage<-factor(sapply(lung$age, function(x){ #Make a 3 level factor
  if(is.na(x)) return (NA)
  if (x<50) return("Young")
  if (x>65) return("Old")
  return("Middleaged")
 }))
@

\section{pcovsum}
<<,results='asis',echo=FALSE>>=
#pcovsum has 3 main imputs, a dataframe, a vector of column names, and optionally
#a single column name.
pcovsum(lung,c("sex2","sex","age","ph.ecog","wt.loss"))
#we see that ph.ecog has 1 missing and wt.loss has 14 missing. Lets pretend that
#some of these are not actually missing but rather not defined for the person.
#Missings are calculated by subtracting from the number of rows in the dataframe.
#We can override this number with a named list
pcovsum(lung,c("sex2","sex","age","ph.ecog","wt.loss"),
        numobs=list("ph.ecog"=nrow(lung)-1,
                    "wt.loss"=nrow(lung)-10))
#We see that now ph.ecog has no missing, and wt.loss has 4 missing.

#We can also use an optional 3rd argument to stratify by a variable.
pcovsum(lung,c("sex2","sex","age","wt.loss"),"ph.ecog")
@

\section{plotkm \& petsum}

plotkm takes 2 main arguments, data, and response. optional argument group specifies the covarate you want to statify by (only one can be used), units to specify the units of the survival time, and CI=T/F, legend=T/F to specifiy if want CI or legend. Legend position can also be changed to "topright","bottomleft","bottomright",'topleft".\\

petsum summarizes our event time outcome. The main covariates are the data and response. We can also specify strata, times we want survival probabilities for, and units. This function does not return a table but rather paragraphs of text


<<,results='asis',fig.align='center',fig.height=4,fig.width=6,message=FALSE,echo=FALSE>>=
#default time is months
plotkm(lung,c("time","OS"))
petsum(lung,c("time","OS"),times=100)
plotkm(lung,c("time","OS"),CI=T,legend=F,units="days")
petsum(lung,c("time","OS"),units="days",times=c(100,200))
plotkm(lung,c("time","OS"),"sex2",units="Days",pos="topright")
petsum(lung,c("time","OS"),units="days",times=c(100,200,300))
petsum(lung,c("time","OS"),"sex2",units="days",times=c(100,200,300))

@



\section{puvsum}
puvsum has 3 requred arguments. There are also other optional ones The first is the response, the second is the covariates,and the third is the data frame. The function will guess what type of model you want to fit. We can use an optional 4th argument to override this guess if we want which is explaiend below. The third element is the data frame. 
<<,results='asis',message=F,echo=FALSE>>=
#Since the response has length 2 and OS only has 2 unique values this will fit coxoh
puvsum(c("time","OS"),c("sex2","age","ph.ecog","wt.loss"),lung)
#Since the response has length 2 and OS2 has more than2 unique values
#This will fit crr from package cmprsk (fine and gray)
puvsum(c("time","OS2"),c("sex2","age","ph.ecog","wt.loss"),lung)
#Since the response has length 1 and has more than 2 unique values this will
#fit lm
puvsum("time",c("sex2","age","ph.ecog","wt.loss"),lung)
#There is no way for me to know if you want to do boxcox transformation
#To specify it you can use the optional 4th argument which is type.
puvsum("time",c("sex2","age","ph.ecog","wt.loss"),lung,"boxcox")
#Since the response has length one and has only two unique values this will
#fit a logistic binomial glm.
puvsum("sex",c("time","age","ph.ecog","wt.loss"),lung)
@

As we saw for boxcox there is an optional 4th argument type.Type can be one of coxph, crr, lm, boxcox, glm. type glm will fit a logistic binomial model. No other glm are currently supported. You can use this 4th option even if you dont have to if you want to be sure.

\section{pmvsum}

We will now consider multivariate models. There are only two required inputs, the model and the data. We need to use special functions crr from cmprsk andboxcoxfit from geoR to fit the fine and gray competing risk model and a boxcox transformed linear model. This is troublesome because. The functions require special input and more importantly produce different output than the other models we have fit. This will break the reportRx functions. To get around this I have written a wrapper function for crr and boxcoxfit called crrRx and boxcoxfitRx. The input to these two functions is as follows:\\

crrRx(formula, data)\\ 
boxcoxfitRx(formula,data)\\

\Sexpr{sanitizestr("NOTE: currently the formula does not work with data$ or data[,] notation. I.E. you can not use data$time, data[,1] or data[,'time'] in the formula. the only way to do it is
 to specify the dataframe as the second argument, We will see examples of this below")}\\
 
 \Sexpr{sanitizestr("The left hand side of the formula for ccrRx is NOT the same as coxph. It does not use the
 Surv object.\\
 Use <name of time column> + <name of status column> ~ as the left hand side. We will see examples of this below")}

<<,echo=FALSE>>=
#First lets try to fit models using these functions
crrRx(time+OS~sex2*age,lung) 
boxcoxfitRx(time~age*sex2,lung)
#crrRx still produces as crr object but its modified in cosmetic ways to 
#work with reportRx
class(crrRx(time+OS~sex2*age,lung))
#boxcoxfitRx now outputs a lm
class(boxcoxfitRx(time~age*sex2,lung))
@


There is also an optional 3rd argument to boxcoxfitRx. Set to TRUE it will make it return a list of length 2. THe first element will be the model, and the second element will be a vector corresponding to the lamda1 and lambda2 of the boxcox transformation. This is useful if you want to invert the link to get transformed confidence intervals.
<<,echo=FALSE>>=
boxcoxfitRx(time~age*sex2,lung,TRUE)
@

Now we can finally use pmvsum

<<,results='asis',echo=FALSE>>=
pmvsum(crrRx(time+OS2~sex2*age+ph.ecog,lung),lung) ## competing risks
pmvsum(coxph(Surv(time,OS)~sex*age,lung),lung) #coxph
pmvsum(lm(time~sex2*ph.ecog,lung),lung) #lm
pmvsum(boxcoxfitRx(time~age*sex2,lung),lung) #boxcox lm
pmvsum(glm(sex2~catage*ph.ecog,family=binomial,data=lung),lung) #logistic
@


<<,echo=FALSE>>=
#After the pdf is created we can go back to this file, fill in and uncomment
#this code. If we have pandoc and imagemagick and ghostscript installed it will
#convert the document to .docx 

#makedocx("directory of .rnw file",

#        "name of .Rnw file (dont include extension)",

#         "directory of pandoc",

#         "directoy of imagemagick)

#only include the last argument (directory of imagemagick) if you have imagefiles.
@

We will now return to the .Rnw file to convert to .docx. But we first must recompile with echo=F because we dont want to show our code in a report! We also must number the sections ourselves because they will not convert properly otherwise.

<<,include=FALSE>>=
#  makedocx("C:\\pm\\presentations\\ExtendingR2\\ExtendingR\\reportRx\\",
#           "ClinicalReportVignette",
#           "C:\\pm\\Pandoc",
#           "C:\\pm\\ImageMagick")
@

\end{document}